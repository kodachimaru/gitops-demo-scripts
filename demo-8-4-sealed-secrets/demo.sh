
# Install SealedSecrets controller
SS_RELEASE="0.7.0"
kubectl apply -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v${SS_RELEASE}/sealedsecret-crd.yaml
kubectl apply -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v${SS_RELEASE}/controller.yaml



# Create target branch staging from master
git checkout -b staging
# Push the Kube resources, including the cleartext secrets, to Git
git push --set-upstream origin staging



# Install Flux

helm init

helm repo add weaveworks https://weaveworks.github.io/flux

helm install \
    --name flux \
    --set helmOperator.create=true \
    --set git.url=git@github.com:kodachimaru/gitops-demo-flux-4-sealed-secrets.git \
    --set git.branch=staging \
    --set git.pollInterval=5s \
    --namespace flux \
    weaveworks/flux

# Get autogenerated SSH key
#Â Add it to GitHub repo, read/write access (more on this later)
fluxctl identity --k8s-fwd-ns=flux



# Monitor Flux workloads
watch "echo ------------- HELM LIST ; helm list --all ; echo -------------- STAGING RES LIST ; kubectl get all -n staging ; echo ------------- FLUX WORKLOAD LIST ; fluxctl --k8s-fwd-ns flux list-workloads -n staging"
# Watch Flux installing the resources
while true; do kubectl logs -f $(kubectl get pods -n flux -o name | grep flux | grep -v helm | grep -v memcached) -n flux ; done



# Show the secret content being correctly accessed  
while true; do kubectl logs -n staging -f $(k get pods -n staging -o name | grep busybox) ; done



# Delete the target branch
git checkout master
git branch -D staging
git push origin --delete staging

# Create target branch staging from master
git checkout -b staging
# Recreate the secret as a SealedSecret
kubectl create secret generic the-secret \
    --from-literal=secret-file.txt=THIS_IS_MY_SEALED_SECRET_CONTENT \
    --type=string \
    -o json -n staging --dry-run \
    | kubeseal --format yaml > the-secret.sealedsecret.yaml
cat the-secret.sealedsecret.yaml
# Remove the old secret
rm the-secret.secret.yaml
# Commit the new one
git add . 
git commit -m "Switched Secret by SealedSecret"
git push --set-upstream origin staging

# Show the secret content being correctly accessed  
kubectl logs -n staging -f $(k get pods -n staging -o name | grep busybox)
    # Note:
    #   - By default Flux doesn't remove Kube resources when they disappear from Git
    #       It needs to be explicitly configured to do so
    #       Reason: To be able to use Flux in places with already running resources without interference
    #       If starting from scratch, it's good to enable auto delete
    #   - After the recreation of the "staging" branch, the deployment is untouched (no changes)
    #       However, the pod picks the new secret ("SEALED") automatically
    #       That's why we are using it as a mounted volume (one of the special auto-update cases for Secrets)



# Undo

git checkout master
git branch -D staging
git push origin --delete staging

helm delete --purge flux
kubectl delete namespace flux
kubectl delete $(kubectl get crd -o name | grep flux)

kubectl delete -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v${SS_RELEASE}/sealedsecret-crd.yaml
kubectl delete -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v${SS_RELEASE}/controller.yaml

kubectl delete namespace staging

helm reset
